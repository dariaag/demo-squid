import * as ethers from 'ethers'
import {LogEvent, Func, ContractBase} from './abi.support'
import {ABI_JSON} from './zeroX.abi'

export const abi = new ethers.Interface(ABI_JSON);

export const functions = {
    _fillLimitOrder: new Func<[order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), takerTokenFillAmount: bigint, taker: string, sender: string], {order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), takerTokenFillAmount: bigint, taker: string, sender: string}, ([takerTokenFilledAmount: bigint, makerTokenFilledAmount: bigint] & {takerTokenFilledAmount: bigint, makerTokenFilledAmount: bigint})>(
        abi, '0x414e4ccf'
    ),
    _fillOtcOrder: new Func<[order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint}), makerSignature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), takerTokenFillAmount: bigint, taker: string, useSelfBalance: boolean, recipient: string], {order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint}), makerSignature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), takerTokenFillAmount: bigint, taker: string, useSelfBalance: boolean, recipient: string}, ([takerTokenFilledAmount: bigint, makerTokenFilledAmount: bigint] & {takerTokenFilledAmount: bigint, makerTokenFilledAmount: bigint})>(
        abi, '0xe4ba8439'
    ),
    _fillRfqOrder: new Func<[order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), takerTokenFillAmount: bigint, taker: string, useSelfBalance: boolean, recipient: string], {order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), takerTokenFillAmount: bigint, taker: string, useSelfBalance: boolean, recipient: string}, ([takerTokenFilledAmount: bigint, makerTokenFilledAmount: bigint] & {takerTokenFilledAmount: bigint, makerTokenFilledAmount: bigint})>(
        abi, '0xaa6b21cd'
    ),
    _multiplexBatchSell: new Func<[params: ([inputToken: string, outputToken: string, sellAmount: bigint, calls: Array<([id: number, sellAmount: bigint, data: string] & {id: number, sellAmount: bigint, data: string})>, useSelfBalance: boolean, recipient: string, payer: string] & {inputToken: string, outputToken: string, sellAmount: bigint, calls: Array<([id: number, sellAmount: bigint, data: string] & {id: number, sellAmount: bigint, data: string})>, useSelfBalance: boolean, recipient: string, payer: string}), minBuyAmount: bigint], {params: ([inputToken: string, outputToken: string, sellAmount: bigint, calls: Array<([id: number, sellAmount: bigint, data: string] & {id: number, sellAmount: bigint, data: string})>, useSelfBalance: boolean, recipient: string, payer: string] & {inputToken: string, outputToken: string, sellAmount: bigint, calls: Array<([id: number, sellAmount: bigint, data: string] & {id: number, sellAmount: bigint, data: string})>, useSelfBalance: boolean, recipient: string, payer: string}), minBuyAmount: bigint}, bigint>(
        abi, '0x43475db9'
    ),
    _multiplexMultiHopSell: new Func<[params: ([tokens: Array<string>, sellAmount: bigint, calls: Array<([id: number, data: string] & {id: number, data: string})>, useSelfBalance: boolean, recipient: string, payer: string] & {tokens: Array<string>, sellAmount: bigint, calls: Array<([id: number, data: string] & {id: number, data: string})>, useSelfBalance: boolean, recipient: string, payer: string}), minBuyAmount: bigint], {params: ([tokens: Array<string>, sellAmount: bigint, calls: Array<([id: number, data: string] & {id: number, data: string})>, useSelfBalance: boolean, recipient: string, payer: string] & {tokens: Array<string>, sellAmount: bigint, calls: Array<([id: number, data: string] & {id: number, data: string})>, useSelfBalance: boolean, recipient: string, payer: string}), minBuyAmount: bigint}, bigint>(
        abi, '0x59517361'
    ),
    _sellHeldTokenForTokenToUniswapV3: new Func<[encodedPath: string, sellAmount: bigint, minBuyAmount: bigint, recipient: string], {encodedPath: string, sellAmount: bigint, minBuyAmount: bigint, recipient: string}, bigint>(
        abi, '0x4a931ba1'
    ),
    _sellTokenForTokenToUniswapV3: new Func<[encodedPath: string, sellAmount: bigint, minBuyAmount: bigint, recipient: string, payer: string], {encodedPath: string, sellAmount: bigint, minBuyAmount: bigint, recipient: string, payer: string}, bigint>(
        abi, '0x168a6432'
    ),
    _transformERC20: new Func<[args: ([taker: string, inputToken: string, outputToken: string, inputTokenAmount: bigint, minOutputTokenAmount: bigint, transformations: Array<([deploymentNonce: number, data: string] & {deploymentNonce: number, data: string})>, useSelfBalance: boolean, recipient: string] & {taker: string, inputToken: string, outputToken: string, inputTokenAmount: bigint, minOutputTokenAmount: bigint, transformations: Array<([deploymentNonce: number, data: string] & {deploymentNonce: number, data: string})>, useSelfBalance: boolean, recipient: string})], {args: ([taker: string, inputToken: string, outputToken: string, inputTokenAmount: bigint, minOutputTokenAmount: bigint, transformations: Array<([deploymentNonce: number, data: string] & {deploymentNonce: number, data: string})>, useSelfBalance: boolean, recipient: string] & {taker: string, inputToken: string, outputToken: string, inputTokenAmount: bigint, minOutputTokenAmount: bigint, transformations: Array<([deploymentNonce: number, data: string] & {deploymentNonce: number, data: string})>, useSelfBalance: boolean, recipient: string})}, bigint>(
        abi, '0x8aa6539b'
    ),
    batchBuyERC1155s: new Func<[sellOrders: Array<([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint})>, signatures: Array<([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})>, erc1155TokenAmounts: Array<bigint>, callbackData: Array<string>, revertIfIncomplete: boolean], {sellOrders: Array<([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint})>, signatures: Array<([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})>, erc1155TokenAmounts: Array<bigint>, callbackData: Array<string>, revertIfIncomplete: boolean}, Array<boolean>>(
        abi, '0x84680615'
    ),
    batchBuyERC721s: new Func<[sellOrders: Array<([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>})>, signatures: Array<([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})>, callbackData: Array<string>, revertIfIncomplete: boolean], {sellOrders: Array<([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>})>, signatures: Array<([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})>, callbackData: Array<string>, revertIfIncomplete: boolean}, Array<boolean>>(
        abi, '0xeae93ee7'
    ),
    batchCancelERC1155Orders: new Func<[orderNonces: Array<bigint>], {orderNonces: Array<bigint>}, []>(
        abi, '0xa1865d6f'
    ),
    batchCancelERC721Orders: new Func<[orderNonces: Array<bigint>], {orderNonces: Array<bigint>}, []>(
        abi, '0x86219940'
    ),
    batchCancelLimitOrders: new Func<[orders: Array<([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint})>], {orders: Array<([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint})>}, []>(
        abi, '0x9baa45a8'
    ),
    batchCancelPairLimitOrders: new Func<[makerTokens: Array<string>, takerTokens: Array<string>, minValidSalts: Array<bigint>], {makerTokens: Array<string>, takerTokens: Array<string>, minValidSalts: Array<bigint>}, []>(
        abi, '0x86a0c8d7'
    ),
    batchCancelPairLimitOrdersWithSigner: new Func<[maker: string, makerTokens: Array<string>, takerTokens: Array<string>, minValidSalts: Array<bigint>], {maker: string, makerTokens: Array<string>, takerTokens: Array<string>, minValidSalts: Array<bigint>}, []>(
        abi, '0x9f0434f5'
    ),
    batchCancelPairRfqOrders: new Func<[makerTokens: Array<string>, takerTokens: Array<string>, minValidSalts: Array<bigint>], {makerTokens: Array<string>, takerTokens: Array<string>, minValidSalts: Array<bigint>}, []>(
        abi, '0x0f0e8cf7'
    ),
    batchCancelPairRfqOrdersWithSigner: new Func<[maker: string, makerTokens: Array<string>, takerTokens: Array<string>, minValidSalts: Array<bigint>], {maker: string, makerTokens: Array<string>, takerTokens: Array<string>, minValidSalts: Array<bigint>}, []>(
        abi, '0xfd5f995b'
    ),
    batchCancelRfqOrders: new Func<[orders: Array<([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint})>], {orders: Array<([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint})>}, []>(
        abi, '0xf6e0f6a5'
    ),
    batchExecuteMetaTransactions: new Func<[mtxs: Array<([signer: string, sender: string, minGasPrice: bigint, maxGasPrice: bigint, expirationTimeSeconds: bigint, salt: bigint, callData: string, value: bigint, feeToken: string, feeAmount: bigint] & {signer: string, sender: string, minGasPrice: bigint, maxGasPrice: bigint, expirationTimeSeconds: bigint, salt: bigint, callData: string, value: bigint, feeToken: string, feeAmount: bigint})>, signatures: Array<([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})>], {mtxs: Array<([signer: string, sender: string, minGasPrice: bigint, maxGasPrice: bigint, expirationTimeSeconds: bigint, salt: bigint, callData: string, value: bigint, feeToken: string, feeAmount: bigint] & {signer: string, sender: string, minGasPrice: bigint, maxGasPrice: bigint, expirationTimeSeconds: bigint, salt: bigint, callData: string, value: bigint, feeToken: string, feeAmount: bigint})>, signatures: Array<([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})>}, Array<string>>(
        abi, '0xc5579ec8'
    ),
    batchExecuteMetaTransactionsV2: new Func<[mtxs: Array<([signer: string, sender: string, expirationTimeSeconds: bigint, salt: bigint, callData: string, feeToken: string, fees: Array<([recipient: string, amount: bigint] & {recipient: string, amount: bigint})>] & {signer: string, sender: string, expirationTimeSeconds: bigint, salt: bigint, callData: string, feeToken: string, fees: Array<([recipient: string, amount: bigint] & {recipient: string, amount: bigint})>})>, signatures: Array<([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})>], {mtxs: Array<([signer: string, sender: string, expirationTimeSeconds: bigint, salt: bigint, callData: string, feeToken: string, fees: Array<([recipient: string, amount: bigint] & {recipient: string, amount: bigint})>] & {signer: string, sender: string, expirationTimeSeconds: bigint, salt: bigint, callData: string, feeToken: string, fees: Array<([recipient: string, amount: bigint] & {recipient: string, amount: bigint})>})>, signatures: Array<([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})>}, Array<string>>(
        abi, '0x34ae3600'
    ),
    batchFillLimitOrders: new Func<[orders: Array<([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint})>, signatures: Array<([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})>, takerTokenFillAmounts: Array<bigint>, revertIfIncomplete: boolean], {orders: Array<([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint})>, signatures: Array<([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})>, takerTokenFillAmounts: Array<bigint>, revertIfIncomplete: boolean}, ([takerTokenFilledAmounts: Array<bigint>, makerTokenFilledAmounts: Array<bigint>] & {takerTokenFilledAmounts: Array<bigint>, makerTokenFilledAmounts: Array<bigint>})>(
        abi, '0x1baaa00b'
    ),
    batchFillRfqOrders: new Func<[orders: Array<([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint})>, signatures: Array<([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})>, takerTokenFillAmounts: Array<bigint>, revertIfIncomplete: boolean], {orders: Array<([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint})>, signatures: Array<([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})>, takerTokenFillAmounts: Array<bigint>, revertIfIncomplete: boolean}, ([takerTokenFilledAmounts: Array<bigint>, makerTokenFilledAmounts: Array<bigint>] & {takerTokenFilledAmounts: Array<bigint>, makerTokenFilledAmounts: Array<bigint>})>(
        abi, '0x75103cb9'
    ),
    batchFillTakerSignedOtcOrders: new Func<[orders: Array<([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint})>, makerSignatures: Array<([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})>, takerSignatures: Array<([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})>, unwrapWeth: Array<boolean>], {orders: Array<([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint})>, makerSignatures: Array<([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})>, takerSignatures: Array<([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})>, unwrapWeth: Array<boolean>}, Array<boolean>>(
        abi, '0xe52d1764'
    ),
    batchGetLimitOrderRelevantStates: new Func<[orders: Array<([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint})>, signatures: Array<([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})>], {orders: Array<([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint})>, signatures: Array<([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})>}, ([orderInfos: Array<([orderHash: string, status: number, takerTokenFilledAmount: bigint] & {orderHash: string, status: number, takerTokenFilledAmount: bigint})>, actualFillableTakerTokenAmounts: Array<bigint>, isSignatureValids: Array<boolean>] & {orderInfos: Array<([orderHash: string, status: number, takerTokenFilledAmount: bigint] & {orderHash: string, status: number, takerTokenFilledAmount: bigint})>, actualFillableTakerTokenAmounts: Array<bigint>, isSignatureValids: Array<boolean>})>(
        abi, '0xb4658bfb'
    ),
    batchGetRfqOrderRelevantStates: new Func<[orders: Array<([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint})>, signatures: Array<([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})>], {orders: Array<([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint})>, signatures: Array<([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})>}, ([orderInfos: Array<([orderHash: string, status: number, takerTokenFilledAmount: bigint] & {orderHash: string, status: number, takerTokenFilledAmount: bigint})>, actualFillableTakerTokenAmounts: Array<bigint>, isSignatureValids: Array<boolean>] & {orderInfos: Array<([orderHash: string, status: number, takerTokenFilledAmount: bigint] & {orderHash: string, status: number, takerTokenFilledAmount: bigint})>, actualFillableTakerTokenAmounts: Array<bigint>, isSignatureValids: Array<boolean>})>(
        abi, '0xad354eeb'
    ),
    batchMatchERC721Orders: new Func<[sellOrders: Array<([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>})>, buyOrders: Array<([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>})>, sellOrderSignatures: Array<([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})>, buyOrderSignatures: Array<([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})>], {sellOrders: Array<([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>})>, buyOrders: Array<([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>})>, sellOrderSignatures: Array<([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})>, buyOrderSignatures: Array<([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})>}, ([profits: Array<bigint>, successes: Array<boolean>] & {profits: Array<bigint>, successes: Array<boolean>})>(
        abi, '0x7da9e2cf'
    ),
    buyERC1155: new Func<[sellOrder: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), erc1155BuyAmount: bigint, callbackData: string], {sellOrder: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), erc1155BuyAmount: bigint, callbackData: string}, []>(
        abi, '0x7cdb54d8'
    ),
    buyERC721: new Func<[sellOrder: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), callbackData: string], {sellOrder: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), callbackData: string}, []>(
        abi, '0xfbee349d'
    ),
    cancelERC1155Order: new Func<[orderNonce: bigint], {orderNonce: bigint}, []>(
        abi, '0x06d2596b'
    ),
    cancelERC721Order: new Func<[orderNonce: bigint], {orderNonce: bigint}, []>(
        abi, '0xbe167b9d'
    ),
    cancelLimitOrder: new Func<[order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint})], {order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint})}, []>(
        abi, '0x7d49ec1a'
    ),
    cancelPairLimitOrders: new Func<[makerToken: string, takerToken: string, minValidSalt: bigint], {makerToken: string, takerToken: string, minValidSalt: bigint}, []>(
        abi, '0xd0a55fb0'
    ),
    cancelPairLimitOrdersWithSigner: new Func<[maker: string, makerToken: string, takerToken: string, minValidSalt: bigint], {maker: string, makerToken: string, takerToken: string, minValidSalt: bigint}, []>(
        abi, '0xb10a33f4'
    ),
    cancelPairRfqOrders: new Func<[makerToken: string, takerToken: string, minValidSalt: bigint], {makerToken: string, takerToken: string, minValidSalt: bigint}, []>(
        abi, '0x9a4f809c'
    ),
    cancelPairRfqOrdersWithSigner: new Func<[maker: string, makerToken: string, takerToken: string, minValidSalt: bigint], {maker: string, makerToken: string, takerToken: string, minValidSalt: bigint}, []>(
        abi, '0x935c82a4'
    ),
    cancelRfqOrder: new Func<[order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint})], {order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint})}, []>(
        abi, '0xfe55a3ef'
    ),
    createTransformWallet: new Func<[], {}, string>(
        abi, '0x287b071b'
    ),
    executeMetaTransaction: new Func<[mtx: ([signer: string, sender: string, minGasPrice: bigint, maxGasPrice: bigint, expirationTimeSeconds: bigint, salt: bigint, callData: string, value: bigint, feeToken: string, feeAmount: bigint] & {signer: string, sender: string, minGasPrice: bigint, maxGasPrice: bigint, expirationTimeSeconds: bigint, salt: bigint, callData: string, value: bigint, feeToken: string, feeAmount: bigint}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})], {mtx: ([signer: string, sender: string, minGasPrice: bigint, maxGasPrice: bigint, expirationTimeSeconds: bigint, salt: bigint, callData: string, value: bigint, feeToken: string, feeAmount: bigint] & {signer: string, sender: string, minGasPrice: bigint, maxGasPrice: bigint, expirationTimeSeconds: bigint, salt: bigint, callData: string, value: bigint, feeToken: string, feeAmount: bigint}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})}, string>(
        abi, '0x3d61ed3e'
    ),
    executeMetaTransactionV2: new Func<[mtx: ([signer: string, sender: string, expirationTimeSeconds: bigint, salt: bigint, callData: string, feeToken: string, fees: Array<([recipient: string, amount: bigint] & {recipient: string, amount: bigint})>] & {signer: string, sender: string, expirationTimeSeconds: bigint, salt: bigint, callData: string, feeToken: string, fees: Array<([recipient: string, amount: bigint] & {recipient: string, amount: bigint})>}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})], {mtx: ([signer: string, sender: string, expirationTimeSeconds: bigint, salt: bigint, callData: string, feeToken: string, fees: Array<([recipient: string, amount: bigint] & {recipient: string, amount: bigint})>] & {signer: string, sender: string, expirationTimeSeconds: bigint, salt: bigint, callData: string, feeToken: string, fees: Array<([recipient: string, amount: bigint] & {recipient: string, amount: bigint})>}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})}, string>(
        abi, '0x3d8d4082'
    ),
    extend: new Func<[selector: string, impl: string], {selector: string, impl: string}, []>(
        abi, '0x6eb224cb'
    ),
    fillLimitOrder: new Func<[order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), takerTokenFillAmount: bigint], {order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), takerTokenFillAmount: bigint}, ([takerTokenFilledAmount: bigint, makerTokenFilledAmount: bigint] & {takerTokenFilledAmount: bigint, makerTokenFilledAmount: bigint})>(
        abi, '0xf6274f66'
    ),
    fillOrKillLimitOrder: new Func<[order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), takerTokenFillAmount: bigint], {order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), takerTokenFillAmount: bigint}, bigint>(
        abi, '0x9240529c'
    ),
    fillOrKillRfqOrder: new Func<[order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), takerTokenFillAmount: bigint], {order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), takerTokenFillAmount: bigint}, bigint>(
        abi, '0x438cdfc5'
    ),
    fillOtcOrder: new Func<[order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint}), makerSignature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), takerTokenFillAmount: bigint], {order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint}), makerSignature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), takerTokenFillAmount: bigint}, ([takerTokenFilledAmount: bigint, makerTokenFilledAmount: bigint] & {takerTokenFilledAmount: bigint, makerTokenFilledAmount: bigint})>(
        abi, '0xdac748d4'
    ),
    fillOtcOrderForEth: new Func<[order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint}), makerSignature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), takerTokenFillAmount: bigint], {order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint}), makerSignature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), takerTokenFillAmount: bigint}, ([takerTokenFilledAmount: bigint, makerTokenFilledAmount: bigint] & {takerTokenFilledAmount: bigint, makerTokenFilledAmount: bigint})>(
        abi, '0xa578efaf'
    ),
    fillOtcOrderWithEth: new Func<[order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint}), makerSignature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})], {order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint}), makerSignature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})}, ([takerTokenFilledAmount: bigint, makerTokenFilledAmount: bigint] & {takerTokenFilledAmount: bigint, makerTokenFilledAmount: bigint})>(
        abi, '0x706394d5'
    ),
    fillRfqOrder: new Func<[order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), takerTokenFillAmount: bigint], {order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), takerTokenFillAmount: bigint}, ([takerTokenFilledAmount: bigint, makerTokenFilledAmount: bigint] & {takerTokenFilledAmount: bigint, makerTokenFilledAmount: bigint})>(
        abi, '0xaa77476c'
    ),
    fillTakerSignedOtcOrder: new Func<[order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint}), makerSignature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), takerSignature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})], {order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint}), makerSignature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), takerSignature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})}, []>(
        abi, '0x4f948110'
    ),
    fillTakerSignedOtcOrderForEth: new Func<[order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint}), makerSignature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), takerSignature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})], {order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint}), makerSignature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), takerSignature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})}, []>(
        abi, '0x724d3953'
    ),
    getERC1155OrderHash: new Func<[order: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint})], {order: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint})}, string>(
        abi, '0x1de3a7ac'
    ),
    getERC1155OrderInfo: new Func<[order: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint})], {order: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint})}, ([orderHash: string, status: number, orderAmount: bigint, remainingAmount: bigint] & {orderHash: string, status: number, orderAmount: bigint, remainingAmount: bigint})>(
        abi, '0x4991fd72'
    ),
    getERC721OrderHash: new Func<[order: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>})], {order: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>})}, string>(
        abi, '0xb73a6027'
    ),
    getERC721OrderStatus: new Func<[order: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>})], {order: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>})}, number>(
        abi, '0xfbc4a518'
    ),
    getERC721OrderStatusBitVector: new Func<[maker: string, nonceRange: bigint], {maker: string, nonceRange: bigint}, bigint>(
        abi, '0x030b2730'
    ),
    getLimitOrderHash: new Func<[order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint})], {order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint})}, string>(
        abi, '0xdd11d225'
    ),
    getLimitOrderInfo: new Func<[order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint})], {order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint})}, ([orderHash: string, status: number, takerTokenFilledAmount: bigint] & {orderHash: string, status: number, takerTokenFilledAmount: bigint})>(
        abi, '0x95480889'
    ),
    getLimitOrderRelevantState: new Func<[order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})], {order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})}, ([orderInfo: ([orderHash: string, status: number, takerTokenFilledAmount: bigint] & {orderHash: string, status: number, takerTokenFilledAmount: bigint}), actualFillableTakerTokenAmount: bigint, isSignatureValid: boolean] & {orderInfo: ([orderHash: string, status: number, takerTokenFilledAmount: bigint] & {orderHash: string, status: number, takerTokenFilledAmount: bigint}), actualFillableTakerTokenAmount: bigint, isSignatureValid: boolean})>(
        abi, '0x1fb09795'
    ),
    getMetaTransactionExecutedBlock: new Func<[mtx: ([signer: string, sender: string, minGasPrice: bigint, maxGasPrice: bigint, expirationTimeSeconds: bigint, salt: bigint, callData: string, value: bigint, feeToken: string, feeAmount: bigint] & {signer: string, sender: string, minGasPrice: bigint, maxGasPrice: bigint, expirationTimeSeconds: bigint, salt: bigint, callData: string, value: bigint, feeToken: string, feeAmount: bigint})], {mtx: ([signer: string, sender: string, minGasPrice: bigint, maxGasPrice: bigint, expirationTimeSeconds: bigint, salt: bigint, callData: string, value: bigint, feeToken: string, feeAmount: bigint] & {signer: string, sender: string, minGasPrice: bigint, maxGasPrice: bigint, expirationTimeSeconds: bigint, salt: bigint, callData: string, value: bigint, feeToken: string, feeAmount: bigint})}, bigint>(
        abi, '0x3fb2da38'
    ),
    getMetaTransactionHash: new Func<[mtx: ([signer: string, sender: string, minGasPrice: bigint, maxGasPrice: bigint, expirationTimeSeconds: bigint, salt: bigint, callData: string, value: bigint, feeToken: string, feeAmount: bigint] & {signer: string, sender: string, minGasPrice: bigint, maxGasPrice: bigint, expirationTimeSeconds: bigint, salt: bigint, callData: string, value: bigint, feeToken: string, feeAmount: bigint})], {mtx: ([signer: string, sender: string, minGasPrice: bigint, maxGasPrice: bigint, expirationTimeSeconds: bigint, salt: bigint, callData: string, value: bigint, feeToken: string, feeAmount: bigint] & {signer: string, sender: string, minGasPrice: bigint, maxGasPrice: bigint, expirationTimeSeconds: bigint, salt: bigint, callData: string, value: bigint, feeToken: string, feeAmount: bigint})}, string>(
        abi, '0xae550497'
    ),
    getMetaTransactionHashExecutedBlock: new Func<[mtxHash: string], {mtxHash: string}, bigint>(
        abi, '0x72d17d03'
    ),
    getMetaTransactionV2ExecutedBlock: new Func<[mtx: ([signer: string, sender: string, expirationTimeSeconds: bigint, salt: bigint, callData: string, feeToken: string, fees: Array<([recipient: string, amount: bigint] & {recipient: string, amount: bigint})>] & {signer: string, sender: string, expirationTimeSeconds: bigint, salt: bigint, callData: string, feeToken: string, fees: Array<([recipient: string, amount: bigint] & {recipient: string, amount: bigint})>})], {mtx: ([signer: string, sender: string, expirationTimeSeconds: bigint, salt: bigint, callData: string, feeToken: string, fees: Array<([recipient: string, amount: bigint] & {recipient: string, amount: bigint})>] & {signer: string, sender: string, expirationTimeSeconds: bigint, salt: bigint, callData: string, feeToken: string, fees: Array<([recipient: string, amount: bigint] & {recipient: string, amount: bigint})>})}, bigint>(
        abi, '0xb13c4c68'
    ),
    getMetaTransactionV2Hash: new Func<[mtx: ([signer: string, sender: string, expirationTimeSeconds: bigint, salt: bigint, callData: string, feeToken: string, fees: Array<([recipient: string, amount: bigint] & {recipient: string, amount: bigint})>] & {signer: string, sender: string, expirationTimeSeconds: bigint, salt: bigint, callData: string, feeToken: string, fees: Array<([recipient: string, amount: bigint] & {recipient: string, amount: bigint})>})], {mtx: ([signer: string, sender: string, expirationTimeSeconds: bigint, salt: bigint, callData: string, feeToken: string, fees: Array<([recipient: string, amount: bigint] & {recipient: string, amount: bigint})>] & {signer: string, sender: string, expirationTimeSeconds: bigint, salt: bigint, callData: string, feeToken: string, fees: Array<([recipient: string, amount: bigint] & {recipient: string, amount: bigint})>})}, string>(
        abi, '0x769c1107'
    ),
    getMetaTransactionV2HashExecutedBlock: new Func<[mtxHash: string], {mtxHash: string}, bigint>(
        abi, '0xa982ee82'
    ),
    getOtcOrderHash: new Func<[order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint})], {order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint})}, string>(
        abi, '0x53476b89'
    ),
    getOtcOrderInfo: new Func<[order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint})], {order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint})}, ([orderHash: string, status: number] & {orderHash: string, status: number})>(
        abi, '0x8c807c43'
    ),
    getProtocolFeeMultiplier: new Func<[], {}, number>(
        abi, '0x487b5c20'
    ),
    getQuoteSigner: new Func<[], {}, string>(
        abi, '0x9f1ec78b'
    ),
    getRfqOrderHash: new Func<[order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint})], {order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint})}, string>(
        abi, '0x016a6d65'
    ),
    getRfqOrderInfo: new Func<[order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint})], {order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint})}, ([orderHash: string, status: number, takerTokenFilledAmount: bigint] & {orderHash: string, status: number, takerTokenFilledAmount: bigint})>(
        abi, '0x346693c5'
    ),
    getRfqOrderRelevantState: new Func<[order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})], {order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})}, ([orderInfo: ([orderHash: string, status: number, takerTokenFilledAmount: bigint] & {orderHash: string, status: number, takerTokenFilledAmount: bigint}), actualFillableTakerTokenAmount: bigint, isSignatureValid: boolean] & {orderInfo: ([orderHash: string, status: number, takerTokenFilledAmount: bigint] & {orderHash: string, status: number, takerTokenFilledAmount: bigint}), actualFillableTakerTokenAmount: bigint, isSignatureValid: boolean})>(
        abi, '0x37f381d8'
    ),
    getRollbackEntryAtIndex: new Func<[selector: string, idx: bigint], {selector: string, idx: bigint}, string>(
        abi, '0x6ba6bbc2'
    ),
    getRollbackLength: new Func<[selector: string], {selector: string}, bigint>(
        abi, '0xdfd00749'
    ),
    getTransformWallet: new Func<[], {}, string>(
        abi, '0xf028e9be'
    ),
    getTransformerDeployer: new Func<[], {}, string>(
        abi, '0x4d54cdb6'
    ),
    isValidOrderSigner: new Func<[maker: string, signer: string], {maker: string, signer: string}, boolean>(
        abi, '0x6b52a4a8'
    ),
    lastOtcTxOriginNonce: new Func<[txOrigin: string, nonceBucket: bigint], {txOrigin: string, nonceBucket: bigint}, bigint>(
        abi, '0x59ebfb45'
    ),
    matchERC721Orders: new Func<[sellOrder: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>}), buyOrder: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>}), sellOrderSignature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), buyOrderSignature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})], {sellOrder: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>}), buyOrder: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>}), sellOrderSignature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), buyOrderSignature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})}, bigint>(
        abi, '0x0d8261eb'
    ),
    migrate: new Func<[target: string, data: string, newOwner: string], {target: string, data: string, newOwner: string}, []>(
        abi, '0x261fe679'
    ),
    multiplexBatchSellEthForToken: new Func<[outputToken: string, calls: Array<([id: number, sellAmount: bigint, data: string] & {id: number, sellAmount: bigint, data: string})>, minBuyAmount: bigint], {outputToken: string, calls: Array<([id: number, sellAmount: bigint, data: string] & {id: number, sellAmount: bigint, data: string})>, minBuyAmount: bigint}, bigint>(
        abi, '0xf35b4733'
    ),
    multiplexBatchSellTokenForEth: new Func<[inputToken: string, calls: Array<([id: number, sellAmount: bigint, data: string] & {id: number, sellAmount: bigint, data: string})>, sellAmount: bigint, minBuyAmount: bigint], {inputToken: string, calls: Array<([id: number, sellAmount: bigint, data: string] & {id: number, sellAmount: bigint, data: string})>, sellAmount: bigint, minBuyAmount: bigint}, bigint>(
        abi, '0x77725df6'
    ),
    multiplexBatchSellTokenForToken: new Func<[inputToken: string, outputToken: string, calls: Array<([id: number, sellAmount: bigint, data: string] & {id: number, sellAmount: bigint, data: string})>, sellAmount: bigint, minBuyAmount: bigint], {inputToken: string, outputToken: string, calls: Array<([id: number, sellAmount: bigint, data: string] & {id: number, sellAmount: bigint, data: string})>, sellAmount: bigint, minBuyAmount: bigint}, bigint>(
        abi, '0x7a1eb1b9'
    ),
    multiplexMultiHopSellEthForToken: new Func<[tokens: Array<string>, calls: Array<([id: number, data: string] & {id: number, data: string})>, minBuyAmount: bigint], {tokens: Array<string>, calls: Array<([id: number, data: string] & {id: number, data: string})>, minBuyAmount: bigint}, bigint>(
        abi, '0x5161b966'
    ),
    multiplexMultiHopSellTokenForEth: new Func<[tokens: Array<string>, calls: Array<([id: number, data: string] & {id: number, data: string})>, sellAmount: bigint, minBuyAmount: bigint], {tokens: Array<string>, calls: Array<([id: number, data: string] & {id: number, data: string})>, sellAmount: bigint, minBuyAmount: bigint}, bigint>(
        abi, '0x9a2967d2'
    ),
    multiplexMultiHopSellTokenForToken: new Func<[tokens: Array<string>, calls: Array<([id: number, data: string] & {id: number, data: string})>, sellAmount: bigint, minBuyAmount: bigint], {tokens: Array<string>, calls: Array<([id: number, data: string] & {id: number, data: string})>, sellAmount: bigint, minBuyAmount: bigint}, bigint>(
        abi, '0x0f3b31b2'
    ),
    onERC1155Received: new Func<[operator: string, from: string, tokenId: bigint, value: bigint, data: string], {operator: string, from: string, tokenId: bigint, value: bigint, data: string}, string>(
        abi, '0xf23a6e61'
    ),
    onERC721Received: new Func<[operator: string, from: string, tokenId: bigint, data: string], {operator: string, from: string, tokenId: bigint, data: string}, string>(
        abi, '0x150b7a02'
    ),
    owner: new Func<[], {}, string>(
        abi, '0x8da5cb5b'
    ),
    preSignERC1155Order: new Func<[order: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint})], {order: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint})}, []>(
        abi, '0x7b757d97'
    ),
    preSignERC721Order: new Func<[order: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>})], {order: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>})}, []>(
        abi, '0x462103af'
    ),
    registerAllowedOrderSigner: new Func<[signer: string, allowed: boolean], {signer: string, allowed: boolean}, []>(
        abi, '0xea7faa61'
    ),
    registerAllowedRfqOrigins: new Func<[origins: Array<string>, allowed: boolean], {origins: Array<string>, allowed: boolean}, []>(
        abi, '0xb09f1fb1'
    ),
    rollback: new Func<[selector: string, targetImpl: string], {selector: string, targetImpl: string}, []>(
        abi, '0x9db64a40'
    ),
    sellERC1155: new Func<[buyOrder: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), erc1155TokenId: bigint, erc1155SellAmount: bigint, unwrapNativeToken: boolean, callbackData: string], {buyOrder: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), erc1155TokenId: bigint, erc1155SellAmount: bigint, unwrapNativeToken: boolean, callbackData: string}, []>(
        abi, '0x6e2eec9e'
    ),
    sellERC721: new Func<[buyOrder: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), erc721TokenId: bigint, unwrapNativeToken: boolean, callbackData: string], {buyOrder: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string}), erc721TokenId: bigint, unwrapNativeToken: boolean, callbackData: string}, []>(
        abi, '0xafde1b3c'
    ),
    sellEthForTokenToUniswapV3: new Func<[encodedPath: string, minBuyAmount: bigint, recipient: string], {encodedPath: string, minBuyAmount: bigint, recipient: string}, bigint>(
        abi, '0x3598d8ab'
    ),
    sellToLiquidityProvider: new Func<[inputToken: string, outputToken: string, provider: string, recipient: string, sellAmount: bigint, minBuyAmount: bigint, auxiliaryData: string], {inputToken: string, outputToken: string, provider: string, recipient: string, sellAmount: bigint, minBuyAmount: bigint, auxiliaryData: string}, bigint>(
        abi, '0xf7fcd384'
    ),
    sellToPancakeSwap: new Func<[tokens: Array<string>, sellAmount: bigint, minBuyAmount: bigint, fork: number], {tokens: Array<string>, sellAmount: bigint, minBuyAmount: bigint, fork: number}, bigint>(
        abi, '0xc43c9ef6'
    ),
    sellToUniswap: new Func<[tokens: Array<string>, sellAmount: bigint, minBuyAmount: bigint, isSushi: boolean], {tokens: Array<string>, sellAmount: bigint, minBuyAmount: bigint, isSushi: boolean}, bigint>(
        abi, '0xd9627aa4'
    ),
    sellTokenForEthToUniswapV3: new Func<[encodedPath: string, sellAmount: bigint, minBuyAmount: bigint, recipient: string], {encodedPath: string, sellAmount: bigint, minBuyAmount: bigint, recipient: string}, bigint>(
        abi, '0x803ba26d'
    ),
    sellTokenForTokenToUniswapV3: new Func<[encodedPath: string, sellAmount: bigint, minBuyAmount: bigint, recipient: string], {encodedPath: string, sellAmount: bigint, minBuyAmount: bigint, recipient: string}, bigint>(
        abi, '0x6af479b2'
    ),
    setQuoteSigner: new Func<[quoteSigner: string], {quoteSigner: string}, []>(
        abi, '0x56ce180a'
    ),
    setTransformerDeployer: new Func<[transformerDeployer: string], {transformerDeployer: string}, []>(
        abi, '0x87c96419'
    ),
    supportInterface: new Func<[interfaceId: string], {interfaceId: string}, boolean>(
        abi, '0x75e79be6'
    ),
    transferOwnership: new Func<[newOwner: string], {newOwner: string}, []>(
        abi, '0xf2fde38b'
    ),
    transferProtocolFeesForPools: new Func<[poolIds: Array<string>], {poolIds: Array<string>}, []>(
        abi, '0x3cd2f026'
    ),
    transferTrappedTokensTo: new Func<[erc20: string, amountOut: bigint, recipientWallet: string], {erc20: string, amountOut: bigint, recipientWallet: string}, []>(
        abi, '0x0d375884'
    ),
    transformERC20: new Func<[inputToken: string, outputToken: string, inputTokenAmount: bigint, minOutputTokenAmount: bigint, transformations: Array<([deploymentNonce: number, data: string] & {deploymentNonce: number, data: string})>], {inputToken: string, outputToken: string, inputTokenAmount: bigint, minOutputTokenAmount: bigint, transformations: Array<([deploymentNonce: number, data: string] & {deploymentNonce: number, data: string})>}, bigint>(
        abi, '0x415565b0'
    ),
    uniswapV3SwapCallback: new Func<[amount0Delta: bigint, amount1Delta: bigint, data: string], {amount0Delta: bigint, amount1Delta: bigint, data: string}, []>(
        abi, '0xfa461e33'
    ),
    validateERC1155OrderProperties: new Func<[order: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint}), erc1155TokenId: bigint], {order: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint}), erc1155TokenId: bigint}, []>(
        abi, '0x2ac6f62a'
    ),
    validateERC1155OrderSignature: new Func<[order: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})], {order: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})}, []>(
        abi, '0x0d32a531'
    ),
    validateERC721OrderProperties: new Func<[order: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>}), erc721TokenId: bigint], {order: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>}), erc721TokenId: bigint}, []>(
        abi, '0x4a13d797'
    ),
    validateERC721OrderSignature: new Func<[order: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})], {order: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})}, []>(
        abi, '0xd1ca183b'
    ),
}

export class Contract extends ContractBase {

    batchGetLimitOrderRelevantStates(orders: Array<([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint})>, signatures: Array<([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})>): Promise<([orderInfos: Array<([orderHash: string, status: number, takerTokenFilledAmount: bigint] & {orderHash: string, status: number, takerTokenFilledAmount: bigint})>, actualFillableTakerTokenAmounts: Array<bigint>, isSignatureValids: Array<boolean>] & {orderInfos: Array<([orderHash: string, status: number, takerTokenFilledAmount: bigint] & {orderHash: string, status: number, takerTokenFilledAmount: bigint})>, actualFillableTakerTokenAmounts: Array<bigint>, isSignatureValids: Array<boolean>})> {
        return this.eth_call(functions.batchGetLimitOrderRelevantStates, [orders, signatures])
    }

    batchGetRfqOrderRelevantStates(orders: Array<([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint})>, signatures: Array<([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})>): Promise<([orderInfos: Array<([orderHash: string, status: number, takerTokenFilledAmount: bigint] & {orderHash: string, status: number, takerTokenFilledAmount: bigint})>, actualFillableTakerTokenAmounts: Array<bigint>, isSignatureValids: Array<boolean>] & {orderInfos: Array<([orderHash: string, status: number, takerTokenFilledAmount: bigint] & {orderHash: string, status: number, takerTokenFilledAmount: bigint})>, actualFillableTakerTokenAmounts: Array<bigint>, isSignatureValids: Array<boolean>})> {
        return this.eth_call(functions.batchGetRfqOrderRelevantStates, [orders, signatures])
    }

    getERC1155OrderHash(order: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint})): Promise<string> {
        return this.eth_call(functions.getERC1155OrderHash, [order])
    }

    getERC1155OrderInfo(order: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc1155Token: string, erc1155TokenId: bigint, erc1155TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>, erc1155TokenAmount: bigint})): Promise<([orderHash: string, status: number, orderAmount: bigint, remainingAmount: bigint] & {orderHash: string, status: number, orderAmount: bigint, remainingAmount: bigint})> {
        return this.eth_call(functions.getERC1155OrderInfo, [order])
    }

    getERC721OrderHash(order: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>})): Promise<string> {
        return this.eth_call(functions.getERC721OrderHash, [order])
    }

    getERC721OrderStatus(order: ([direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>] & {direction: number, maker: string, taker: string, expiry: bigint, nonce: bigint, erc20Token: string, erc20TokenAmount: bigint, fees: Array<([recipient: string, amount: bigint, feeData: string] & {recipient: string, amount: bigint, feeData: string})>, erc721Token: string, erc721TokenId: bigint, erc721TokenProperties: Array<([propertyValidator: string, propertyData: string] & {propertyValidator: string, propertyData: string})>})): Promise<number> {
        return this.eth_call(functions.getERC721OrderStatus, [order])
    }

    getERC721OrderStatusBitVector(maker: string, nonceRange: bigint): Promise<bigint> {
        return this.eth_call(functions.getERC721OrderStatusBitVector, [maker, nonceRange])
    }

    getLimitOrderHash(order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint})): Promise<string> {
        return this.eth_call(functions.getLimitOrderHash, [order])
    }

    getLimitOrderInfo(order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint})): Promise<([orderHash: string, status: number, takerTokenFilledAmount: bigint] & {orderHash: string, status: number, takerTokenFilledAmount: bigint})> {
        return this.eth_call(functions.getLimitOrderInfo, [order])
    }

    getLimitOrderRelevantState(order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, takerTokenFeeAmount: bigint, maker: string, taker: string, sender: string, feeRecipient: string, pool: string, expiry: bigint, salt: bigint}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})): Promise<([orderInfo: ([orderHash: string, status: number, takerTokenFilledAmount: bigint] & {orderHash: string, status: number, takerTokenFilledAmount: bigint}), actualFillableTakerTokenAmount: bigint, isSignatureValid: boolean] & {orderInfo: ([orderHash: string, status: number, takerTokenFilledAmount: bigint] & {orderHash: string, status: number, takerTokenFilledAmount: bigint}), actualFillableTakerTokenAmount: bigint, isSignatureValid: boolean})> {
        return this.eth_call(functions.getLimitOrderRelevantState, [order, signature])
    }

    getMetaTransactionExecutedBlock(mtx: ([signer: string, sender: string, minGasPrice: bigint, maxGasPrice: bigint, expirationTimeSeconds: bigint, salt: bigint, callData: string, value: bigint, feeToken: string, feeAmount: bigint] & {signer: string, sender: string, minGasPrice: bigint, maxGasPrice: bigint, expirationTimeSeconds: bigint, salt: bigint, callData: string, value: bigint, feeToken: string, feeAmount: bigint})): Promise<bigint> {
        return this.eth_call(functions.getMetaTransactionExecutedBlock, [mtx])
    }

    getMetaTransactionHash(mtx: ([signer: string, sender: string, minGasPrice: bigint, maxGasPrice: bigint, expirationTimeSeconds: bigint, salt: bigint, callData: string, value: bigint, feeToken: string, feeAmount: bigint] & {signer: string, sender: string, minGasPrice: bigint, maxGasPrice: bigint, expirationTimeSeconds: bigint, salt: bigint, callData: string, value: bigint, feeToken: string, feeAmount: bigint})): Promise<string> {
        return this.eth_call(functions.getMetaTransactionHash, [mtx])
    }

    getMetaTransactionHashExecutedBlock(mtxHash: string): Promise<bigint> {
        return this.eth_call(functions.getMetaTransactionHashExecutedBlock, [mtxHash])
    }

    getMetaTransactionV2ExecutedBlock(mtx: ([signer: string, sender: string, expirationTimeSeconds: bigint, salt: bigint, callData: string, feeToken: string, fees: Array<([recipient: string, amount: bigint] & {recipient: string, amount: bigint})>] & {signer: string, sender: string, expirationTimeSeconds: bigint, salt: bigint, callData: string, feeToken: string, fees: Array<([recipient: string, amount: bigint] & {recipient: string, amount: bigint})>})): Promise<bigint> {
        return this.eth_call(functions.getMetaTransactionV2ExecutedBlock, [mtx])
    }

    getMetaTransactionV2Hash(mtx: ([signer: string, sender: string, expirationTimeSeconds: bigint, salt: bigint, callData: string, feeToken: string, fees: Array<([recipient: string, amount: bigint] & {recipient: string, amount: bigint})>] & {signer: string, sender: string, expirationTimeSeconds: bigint, salt: bigint, callData: string, feeToken: string, fees: Array<([recipient: string, amount: bigint] & {recipient: string, amount: bigint})>})): Promise<string> {
        return this.eth_call(functions.getMetaTransactionV2Hash, [mtx])
    }

    getMetaTransactionV2HashExecutedBlock(mtxHash: string): Promise<bigint> {
        return this.eth_call(functions.getMetaTransactionV2HashExecutedBlock, [mtxHash])
    }

    getOtcOrderHash(order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint})): Promise<string> {
        return this.eth_call(functions.getOtcOrderHash, [order])
    }

    getOtcOrderInfo(order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, expiryAndNonce: bigint})): Promise<([orderHash: string, status: number] & {orderHash: string, status: number})> {
        return this.eth_call(functions.getOtcOrderInfo, [order])
    }

    getProtocolFeeMultiplier(): Promise<number> {
        return this.eth_call(functions.getProtocolFeeMultiplier, [])
    }

    getQuoteSigner(): Promise<string> {
        return this.eth_call(functions.getQuoteSigner, [])
    }

    getRfqOrderHash(order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint})): Promise<string> {
        return this.eth_call(functions.getRfqOrderHash, [order])
    }

    getRfqOrderInfo(order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint})): Promise<([orderHash: string, status: number, takerTokenFilledAmount: bigint] & {orderHash: string, status: number, takerTokenFilledAmount: bigint})> {
        return this.eth_call(functions.getRfqOrderInfo, [order])
    }

    getRfqOrderRelevantState(order: ([makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint] & {makerToken: string, takerToken: string, makerAmount: bigint, takerAmount: bigint, maker: string, taker: string, txOrigin: string, pool: string, expiry: bigint, salt: bigint}), signature: ([signatureType: number, v: number, r: string, s: string] & {signatureType: number, v: number, r: string, s: string})): Promise<([orderInfo: ([orderHash: string, status: number, takerTokenFilledAmount: bigint] & {orderHash: string, status: number, takerTokenFilledAmount: bigint}), actualFillableTakerTokenAmount: bigint, isSignatureValid: boolean] & {orderInfo: ([orderHash: string, status: number, takerTokenFilledAmount: bigint] & {orderHash: string, status: number, takerTokenFilledAmount: bigint}), actualFillableTakerTokenAmount: bigint, isSignatureValid: boolean})> {
        return this.eth_call(functions.getRfqOrderRelevantState, [order, signature])
    }

    getRollbackEntryAtIndex(selector: string, idx: bigint): Promise<string> {
        return this.eth_call(functions.getRollbackEntryAtIndex, [selector, idx])
    }

    getRollbackLength(selector: string): Promise<bigint> {
        return this.eth_call(functions.getRollbackLength, [selector])
    }

    getTransformWallet(): Promise<string> {
        return this.eth_call(functions.getTransformWallet, [])
    }

    getTransformerDeployer(): Promise<string> {
        return this.eth_call(functions.getTransformerDeployer, [])
    }

    isValidOrderSigner(maker: string, signer: string): Promise<boolean> {
        return this.eth_call(functions.isValidOrderSigner, [maker, signer])
    }

    lastOtcTxOriginNonce(txOrigin: string, nonceBucket: bigint): Promise<bigint> {
        return this.eth_call(functions.lastOtcTxOriginNonce, [txOrigin, nonceBucket])
    }

    owner(): Promise<string> {
        return this.eth_call(functions.owner, [])
    }

    supportInterface(interfaceId: string): Promise<boolean> {
        return this.eth_call(functions.supportInterface, [interfaceId])
    }
}
